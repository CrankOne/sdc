---
# CI script for CERN GitLab

image: gitlab-registry.cern.ch/p348/na64sw/na64sw-ci-alma9

variables:
  # this steers how deep the commits history should be fetched. Setting it to
  # 0 should effectively make git clone the whole thing by the price of some
  # performance. Since we rely on 'git describe' to figure out package version
  # we do need potentially unlimited depth to trace the current commit to
  # the latest tag.
  GIT_DEPTH: 0

.x-deduce-build-configuration: &configure-environment |-
  export BUILD_ENVIRONMENT=${CI_JOB_NAME%-*}  # strip -build/-test, etc
  echo "Build environment is ${BUILD_ENVIRONMENT} (for job $CI_JOB_NAME)"
  export BUILD_CFG_SUFFIX=${BUILD_ENVIRONMENT##*-}  # get -opt/-dbg
  echo "Build configuration is $BUILD_CFG_SUFFIX"
  export LCG_BUILD_RELEASE=${BUILD_ENVIRONMENT%/*}  # get LCG_* from LCG_XXX/xxx
  if [[ "$LCG_BUILD_RELEASE" == LCG_* ]] ; then
    export BUILD_ENV_TAG=${BUILD_ENVIRONMENT//\//.}  # subst / with . in LCG_XXX/xxx and use as a tag
    echo "Assuming LCG-based build ${BUILD_ENVIRONMENT}"
    source /cvmfs/na64.cern.ch/sft/${BUILD_ENVIRONMENT}/this-env.sh
  else
    export BUILD_ENV_TAG="$BUILD_ENVIRONMENT"  # use x86_64_... as build env tag
    echo "Assuming vanilla build"
    export LCG_BUILD_RELEASE=""
  fi

#
# Debug build
.x-build-stage: &lcg-build-stage
  stage: build
  tags: [cvmfs]
  variables:
    GIT_STRATEGY: clone
  script:
    - *configure-environment
    - 'export CMAKE_BUILD_TYPE=$([[ $BUILD_CFG_SUFFIX = dbg ]] && echo "Debug" || echo "Release")'
    - 'echo "Stage \"${CI_JOB_STAGE}\" is considered as ${BUILD_CFG_SUFFIX} build in ${BUILD_ENVIRONMENT} environment."'
    - 'echo "CMake build type in use: $CMAKE_BUILD_TYPE"'
    - git fetch --tags
    # assure we have tags for proper versioning
    - mkdir build
    - cd build
    # configure build, with verbose logging of configure stage
    # * CPack generator set to gzipped archive
    # * Vendor set to denote CI-based build (to differ from manual deployments)
    - >
        cmake .. -DCMAKE_BUILD_TYPE=${CMAKE_BUILD_TYPE} \
          --log-level=DEBUG \
          -DCPACK_GENERATOR=TGZ \
          -DCPACK_PACKAGE_VENDOR="NA64 Collaboration (CERN), GitLab CI" \
          -DCMAKE_INSTALL_PREFIX=/cvmfs/na64.cern.ch/sft/$BUILD_ENVIRONMENT/${CI_PROJECT_NAME}/tmp
    # Get version string
    - export PACKAGE_VERSION=$(cat version.txt)-$BUILD_CFG_SUFFIX
    # Reconfigure with correct prefix (versions.txt must be generated by
    # previous invokation):
    - >
        cmake .. \
          -DCMAKE_INSTALL_PREFIX=/cvmfs/na64.cern.ch/sft/$BUILD_ENVIRONMENT/${CI_PROJECT_NAME}/$PACKAGE_VERSION
    # create linux environment module file to be used on share
    - |
      cat > modulefile <<EOF
      #%Module1.0                                                                     
      proc ModulesHelp { } {
         puts stderr "[module-info name]: sdc, v$(cat version.txt) for ${CI_PROJECT_NAME}, v$PACKAGE_VERSION for $BUILD_ENVIRONMENT"
      }
      module-whatis "SDC, v$(cat version.txt) for $BUILD_ENVIRONMENT"
      set prefix /cvmfs/na64.cern.ch/sft/$BUILD_ENVIRONMENT/${CI_PROJECT_NAME}/$PACKAGE_VERSION
      prepend-path        PATH                \$prefix/bin
      prepend-path        PKG_CONFIG_PATH     \$prefix/lib/pkgconfig
      # vim: set filetype=tcl : 
      EOF
    - echo "Generated modulefile:" && cat modulefile
    # build the stuff and pack into the distributable build
    - VERBOSE=1 make -j4
    - make package
    - mv ${CI_PROJECT_NAME}-*-Linux.tar.gz ${CI_PROJECT_NAME}-$PACKAGE_VERSION.cpack.tar.gz
    # publish (upload) generic package
    - 'curl --header "JOB-TOKEN: $CI_JOB_TOKEN" --upload-file ${CI_PROJECT_NAME}-$PACKAGE_VERSION.cpack.tar.gz "${CI_API_V4_URL}/projects/${CI_PROJECT_ID}/packages/generic/${CI_PROJECT_NAME}/$(cat version.txt)/$BUILD_ENV_TAG-$PACKAGE_VERSION.cpack.tar.gz"'
    # publish (upload) corresponding modulefile for CERN CVMFS
    - 'curl --header "JOB-TOKEN: $CI_JOB_TOKEN" --upload-file modulefile "${CI_API_V4_URL}/projects/${CI_PROJECT_ID}/packages/generic/${CI_PROJECT_NAME}/$(cat version.txt)/$BUILD_ENV_TAG-${PACKAGE_VERSION}.modulefile"'
    - echo "PACKAGE_VERSION=$PACKAGE_VERSION" > ../version.env
  artifacts:
    paths:
      - build/*
      #- build/na64sw-*.tar.gz
      #- build/na64sw-modulefile
    reports:
      dotenv: version.env
    # - build/modulefile  # TODO

LCG_105/x86_64-el9-gcc13-dbg-build:
  <<: *lcg-build-stage

#LCG_105/x86_64-el9-gcc13-opt-build:
#  <<: *lcg-build-stage

x86_64-el9-gcc11-dbg-build:
  <<: *lcg-build-stage

...
# vim: set tabstop=2 :

